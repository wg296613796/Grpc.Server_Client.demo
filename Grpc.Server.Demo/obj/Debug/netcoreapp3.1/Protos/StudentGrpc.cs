// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/student.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grpc.Server.Demo {
  /// <summary>
  /// 约定需要提供的服务方法
  /// </summary>
  public static partial class StudentService
  {
    static readonly string __ServiceName = "user.StudentService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Grpc.Server.Demo.TokenRequest> __Marshaller_user_TokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.TokenRequest.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.TokenResponse> __Marshaller_user_TokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.TokenResponse.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.QueryStudentRequest> __Marshaller_user_QueryStudentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.QueryStudentRequest.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.StudentResponse> __Marshaller_user_StudentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.StudentResponse.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.QueryAllStudentRequest> __Marshaller_user_QueryAllStudentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.QueryAllStudentRequest.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.UploadImgRequest> __Marshaller_user_UploadImgRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.UploadImgRequest.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.CommonResponse> __Marshaller_user_CommonResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.CommonResponse.Parser));
    static readonly grpc::Marshaller<global::Grpc.Server.Demo.AddStudentRequest> __Marshaller_user_AddStudentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grpc.Server.Demo.AddStudentRequest.Parser));

    static readonly grpc::Method<global::Grpc.Server.Demo.TokenRequest, global::Grpc.Server.Demo.TokenResponse> __Method_GetToken = new grpc::Method<global::Grpc.Server.Demo.TokenRequest, global::Grpc.Server.Demo.TokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToken",
        __Marshaller_user_TokenRequest,
        __Marshaller_user_TokenResponse);

    static readonly grpc::Method<global::Grpc.Server.Demo.QueryStudentRequest, global::Grpc.Server.Demo.StudentResponse> __Method_GetStudentByUserName = new grpc::Method<global::Grpc.Server.Demo.QueryStudentRequest, global::Grpc.Server.Demo.StudentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStudentByUserName",
        __Marshaller_user_QueryStudentRequest,
        __Marshaller_user_StudentResponse);

    static readonly grpc::Method<global::Grpc.Server.Demo.QueryAllStudentRequest, global::Grpc.Server.Demo.StudentResponse> __Method_GetAllStudent = new grpc::Method<global::Grpc.Server.Demo.QueryAllStudentRequest, global::Grpc.Server.Demo.StudentResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllStudent",
        __Marshaller_user_QueryAllStudentRequest,
        __Marshaller_user_StudentResponse);

    static readonly grpc::Method<global::Grpc.Server.Demo.UploadImgRequest, global::Grpc.Server.Demo.CommonResponse> __Method_UploadImg = new grpc::Method<global::Grpc.Server.Demo.UploadImgRequest, global::Grpc.Server.Demo.CommonResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UploadImg",
        __Marshaller_user_UploadImgRequest,
        __Marshaller_user_CommonResponse);

    static readonly grpc::Method<global::Grpc.Server.Demo.AddStudentRequest, global::Grpc.Server.Demo.StudentResponse> __Method_AddManyStudents = new grpc::Method<global::Grpc.Server.Demo.AddStudentRequest, global::Grpc.Server.Demo.StudentResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AddManyStudents",
        __Marshaller_user_AddStudentRequest,
        __Marshaller_user_StudentResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.Server.Demo.StudentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StudentService</summary>
    [grpc::BindServiceMethod(typeof(StudentService), "BindService")]
    public abstract partial class StudentServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Grpc.Server.Demo.TokenResponse> GetToken(global::Grpc.Server.Demo.TokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 简单模式，查询
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.Server.Demo.StudentResponse> GetStudentByUserName(global::Grpc.Server.Demo.QueryStudentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 服务端流模式
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetAllStudent(global::Grpc.Server.Demo.QueryAllStudentRequest request, grpc::IServerStreamWriter<global::Grpc.Server.Demo.StudentResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 客户端流模式
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.Server.Demo.CommonResponse> UploadImg(grpc::IAsyncStreamReader<global::Grpc.Server.Demo.UploadImgRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 双向流模式
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task AddManyStudents(grpc::IAsyncStreamReader<global::Grpc.Server.Demo.AddStudentRequest> requestStream, grpc::IServerStreamWriter<global::Grpc.Server.Demo.StudentResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StudentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetToken, serviceImpl.GetToken)
          .AddMethod(__Method_GetStudentByUserName, serviceImpl.GetStudentByUserName)
          .AddMethod(__Method_GetAllStudent, serviceImpl.GetAllStudent)
          .AddMethod(__Method_UploadImg, serviceImpl.UploadImg)
          .AddMethod(__Method_AddManyStudents, serviceImpl.AddManyStudents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StudentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.Server.Demo.TokenRequest, global::Grpc.Server.Demo.TokenResponse>(serviceImpl.GetToken));
      serviceBinder.AddMethod(__Method_GetStudentByUserName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.Server.Demo.QueryStudentRequest, global::Grpc.Server.Demo.StudentResponse>(serviceImpl.GetStudentByUserName));
      serviceBinder.AddMethod(__Method_GetAllStudent, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Grpc.Server.Demo.QueryAllStudentRequest, global::Grpc.Server.Demo.StudentResponse>(serviceImpl.GetAllStudent));
      serviceBinder.AddMethod(__Method_UploadImg, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Grpc.Server.Demo.UploadImgRequest, global::Grpc.Server.Demo.CommonResponse>(serviceImpl.UploadImg));
      serviceBinder.AddMethod(__Method_AddManyStudents, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Grpc.Server.Demo.AddStudentRequest, global::Grpc.Server.Demo.StudentResponse>(serviceImpl.AddManyStudents));
    }

  }
}
#endregion
